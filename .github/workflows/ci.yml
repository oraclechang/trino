name: ci

on:
  push:
    branches:
      - master
  pull_request:
    paths-ignore:
      - 'docs/**'

env:
  # An envar that signals to tests we are executing in the CI environment
  CONTINUOUS_INTEGRATION: true
  # allow overriding Maven command
  MAVEN: ./mvnw
  # maven.wagon.rto is in millis, defaults to 30m
  MAVEN_OPTS: "-Xmx512M -XX:+ExitOnOutOfMemoryError -Dmaven.wagon.rto=60000"
  MAVEN_INSTALL_OPTS: "-Xmx2G -XX:+ExitOnOutOfMemoryError -Dmaven.wagon.rto=60000"
  MAVEN_FAST_INSTALL: "-B --strict-checksums -V --quiet -T C1 -DskipTests -Dmaven.source.skip=true -Dair.check.skip-all -P gib -Dgib.referenceBranch=refs/remotes/origin/${{ github.event.pull_request.base.ref }}"
  MAVEN_TEST: "-B --strict-checksums -Dmaven.source.skip=true -Dair.check.skip-all --fail-at-end -P gib -Dgib.referenceBranch=refs/remotes/origin/${{ github.event.pull_request.base.ref }}"
  RETRY: .github/bin/retry
  # Testcontainers kills image pulls if they don't make progress for > 30s and retries for 2m before failing. This means
  # that if an image doesn't download all it's layers within ~2m then any other concurrent pull will be killed because
  # the Docker daemon only downloads 3 layers concurrently which prevents the other pull from making any progress.
  # This value should be greater than the time taken for the longest image pull.
  TESTCONTAINERS_PULL_PAUSE_TIMEOUT: 600
  TEST_REPORT_RETENTION_DAYS: 5

# Cancel previous PR builds.
concurrency:
  # Cancel all workflow runs except latest within a concurrency group. This is achieved by defining a concurrency group for the PR.
  # Non-PR builds have singleton concurrency groups.
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.event.number || github.sha }}
  cancel-in-progress: true

jobs:
  build-test-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # checkout all commits to be able to determine merge base for GIB
      - name: Fetch base ref to find merge-base for GIB
        run: .github/bin/git-fetch-base-ref.sh
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 11
      - name: Maven validate
        run: |
          export MAVEN_OPTS="${MAVEN_INSTALL_OPTS}"
          $RETRY $MAVEN validate ${MAVEN_FAST_INSTALL} -P disable-check-spi-dependencies -pl '!:trino-docs,!:trino-server,!:trino-server-rpm'
      - name: Set matrix
        id: set-matrix
        run: |
          # GIB doesn't run on master, so make sure the file always exist
          touch gib-impacted.log
          cat <<EOF > .github/test-matrix.yaml
          include:
            - { modules: plugin/trino-iceberg }
          EOF
          ./.github/bin/build-matrix-from-impacted.py -v -i gib-impacted.log -m .github/test-matrix.yaml -o matrix.json
          echo "Matrix: $(jq '.' matrix.json)"
          echo "::set-output name=matrix::$(jq -c '.' matrix.json)"

  test:
    runs-on: ubuntu-latest
    needs: build-test-matrix
    if: needs.build-test-matrix.outputs.matrix != '{}'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build-test-matrix.outputs.matrix) }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # checkout all commits to be able to determine merge base for GIB
      - name: Fetch base ref to find merge-base for GIB
        run: .github/bin/git-fetch-base-ref.sh
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 11
          cache: 'maven'
      - name: Configure Problem Matchers
        run: echo "::add-matcher::.github/problem-matcher.json"
      - name: Cleanup node
        # This is required as a virtual environment update 20210219.1 left too little space for MemSQL to work
        if: matrix.modules == 'plugin/trino-singlestore'
        run: .github/bin/cleanup-node.sh
      - name: Maven Install
        run: |
          export MAVEN_OPTS="${MAVEN_INSTALL_OPTS}"
          $RETRY $MAVEN clean install ${MAVEN_FAST_INSTALL} -am -pl "${{ matrix.modules }}"
      - name: Maven Tests
        if: matrix.modules != 'plugin/trino-singlestore'
        run: $MAVEN test ${MAVEN_TEST} -pl ${{ matrix.modules }} ${{ matrix.profile != '' && format('-P {0}', matrix.profile) || '' }}
      # Additional tests for selected modules
      - name: Cloud Delta Lake Tests
        env:
          ABFS_CONTAINER: ${{ secrets.AZURE_ABFS_CONTAINER }}
          ABFS_ACCOUNT: ${{ secrets.AZURE_ABFS_ACCOUNT }}
          ABFS_ACCESSKEY: ${{ secrets.AZURE_ABFS_ACCESSKEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESSKEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRETKEY }}
          AWS_REGION: us-east-2
        # Run tests if any of the secrets is present. Do not skip tests when one secret renamed, or secret name has a typo.
        if: >-
          contains(matrix.modules, 'trino-delta-lake') &&
          (env.ABFS_ACCOUNT != '' || env.ABFS_CONTAINER != '' || env.ABFS_ACCESSKEY != '' || env.AWS_ACCESS_KEY_ID != '' || env.AWS_SECRET_ACCESS_KEY != '')
        run: |
          $MAVEN test ${MAVEN_TEST} -P cloud-tests -pl :trino-delta-lake \
            -Dhive.hadoop2.azure-abfs-container="${ABFS_CONTAINER}" \
            -Dhive.hadoop2.azure-abfs-account="${ABFS_ACCOUNT}" \
            -Dhive.hadoop2.azure-abfs-access-key="${ABFS_ACCESSKEY}"
      - name: Memsql Tests
        env:
          MEMSQL_LICENSE: ${{ secrets.MEMSQL_LICENSE }}
        if: matrix.modules == 'plugin/trino-singlestore' && env.MEMSQL_LICENSE != ''
        run: |
          $MAVEN test ${MAVEN_TEST} -pl :trino-singlestore -Dmemsql.license=${MEMSQL_LICENSE}
      - name: Cloud BigQuery Tests
        env:
          BIGQUERY_CREDENTIALS_KEY: ${{ secrets.BIGQUERY_CREDENTIALS_KEY }}
        if: matrix.modules == 'plugin/trino-bigquery' && env.BIGQUERY_CREDENTIALS_KEY != ''
        run: |
          $MAVEN test ${MAVEN_TEST} -pl :trino-bigquery -Pcloud-tests -Dbigquery.credentials-key="${BIGQUERY_CREDENTIALS_KEY}"
      - name: Cloud BigQuery Case Insensitive Mapping Tests
        env:
          BIGQUERY_CASE_INSENSITIVE_CREDENTIALS_KEY: ${{ secrets.BIGQUERY_CASE_INSENSITIVE_CREDENTIALS_KEY }}
        if: matrix.modules == 'plugin/trino-bigquery' && env.BIGQUERY_CASE_INSENSITIVE_CREDENTIALS_KEY != ''
        run: |
          $MAVEN test ${MAVEN_TEST} -pl :trino-bigquery -Pcloud-tests-case-insensitive-mapping -Dbigquery.credentials-key="${BIGQUERY_CASE_INSENSITIVE_CREDENTIALS_KEY}"
      - name: Iceberg Glue Catalog Tests
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESSKEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRETKEY }}
          AWS_REGION: us-east-2
          S3_BUCKET: presto-ci-test
        if: contains(matrix.modules, 'plugin/trino-iceberg') && (env.AWS_ACCESS_KEY_ID != '' || env.AWS_SECRET_ACCESS_KEY != '')
        run: |
          $MAVEN test ${MAVEN_TEST} -pl :trino-iceberg -P test-glue-catalog -Ds3.bucket=${S3_BUCKET}
      - name: Sanitize artifact name
        if: always()
        run: |
          # Generate a valid artifact name and make it available to next steps as
          # an environment variable ARTIFACT_NAME
          # ", :, <, >, |, *, ?, \, / are not allowed in artifact names, replace it with an underscore
          name=$(echo -n "${{ matrix.modules }}" | sed -e 's/[":<>|\*\?\\\/]/_/g')
          echo "ARTIFACT_NAME=$name" >> $GITHUB_ENV
      - name: Upload test results
        uses: actions/upload-artifact@v2
        # Upload all test reports only on failure, because the artifacts are large
        if: failure()
        with:
          name: result ${{ env.ARTIFACT_NAME }}
          path: |
            **/target/surefire-reports
            **/target/checkstyle-*
      - name: Upload test report
        uses: actions/upload-artifact@v2
        # Always upload the test report for the annotate.yml workflow,
        # but only the single XML file to keep the artifact small
        if: always()
        with:
          # Name prefix is checked in the `Annotate checks` workflow
          name: test report ${{ github.job }} (${{ env.ARTIFACT_NAME }})
          path: |
            **/surefire-reports/TEST-*.xml
          retention-days: ${{ env.TEST_REPORT_RETENTION_DAYS }}
